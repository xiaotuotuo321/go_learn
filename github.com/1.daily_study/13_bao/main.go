package main

// go语言中的包

// 1.定义包：一个包可以简单理解为一个存放.go文件的文件夹。该文件夹下面的所有go文件都要在第一行代码添加 package 报名，声明该文件归属包
// 注意点：1.一个文件夹下面直接包含的文件只能归属一个package，同样一个package文件夹不能在多个文件夹下
// 		  2.包名可以不和文件夹的名字一样，包名不能包含-符号
// 		  3.包名为main的包为应用程序的入口包，这种包编译后得到一个可执行的文件，而编译不包含main包的源代码则不会得到可执行文件

// 2.可见性：如果想在一个包中引用另一个包里面的标识符（如变量，常量，类型，函数等）时，该标识符必须是对外可见的。在go语言中只需要将标识符的首字母
// 大写就可以让标识符对外可见了。

// package pkg2

//import "fmt"
//
//// 包可见性
//var a = 100 // 首字母小写，外部包不可见，只能在包内使用
//
//// 首字母大写包外可见，可在其他包中使用
//const Mode = 1
//
//type person struct {	// 结构体首字母小写，外部包不可见，只能在当前包使用
//	name string
//}
//
//// 首字母大写，外部包可见，可在其他包中使用
//func Add(x, y int) int {
//	return x + y
//}
//
//func age() {	// 首字母小写，外部包不可见，只能在当前包中使用
//	var Age = 18 // 函数局部变量，外部包不可见，只能在当前函数中使用
//	fmt.Println(Age)
//}
//
//// 结构体中的字段名和接口名中的方法如果首字母都是大写的，外部包可以访问这些字段和方法，
//type Student struct {
//	Name string	// 可在包外访问的字段
//	class string	// 仅在包内访问的字段
//}
//
//type Player interface {
//	init() // 仅限包内访问的方法
//	Pay()	// 可在包外访问的方法
//}

// 3.包的导入：包的导入需要使用import关键字 import "关键字"
// 注意事项：1.import导入语句通常放在文件开头包声明的下面
// 		   2.导入的包名需要使用双引号包裹起来
// 		   3.包名是从$GOPATH/src/后开始计算的，使用/进行路径分隔
// 		   4.GO语言中禁止循环导入包

// 3.1.单行导入
// import "包1"
// import "包2"

// 3.2.多行导入
// import ("包1",
//		   "包2")

// 4.自定义包名：在导入包名的时候，我们还可以为导入的包设置别名，通常用于导入的包名，太长或者导入的包名冲入的情况下，
// import 别名 "包的路径"
// 4.1.单行导入方式定义别名
//import "fmt"
//import m "github.com/Q1mi/studygo/pkg_test"

// 4.2.多行导入方式定义别名
//import (
//	"fmt"
//	m "github.com/Q1mi/studygo/pkg_test"
//)
//func main() {
//	fmt.Println(m.Add(100, 200))
//	fmt.Println(m.model)
//}

// 5.匿名导入包 只希望导入包，并不使用包里面的数据时，可以使用匿名导入包 import _ "包的路径"
// 匿名导入的包与其他方式导入的包一样会被编译到可执行文件中

// 6.init()初始化函数
// 6.1.init()函数的介绍，在go语言程序执行导入包语句会自动触发包内部init()函数的调用。需要注意时，init()函数没有参数也没有返回值。init()函数
// 在程序运行时自动被调用执行，不能在代码中主动调用它

// 6.2.函数执行顺序：go语言会从main包开始检查其导入的所有包，每个包中又可能导入了其他的包。go编译器由此构建出一个树状的包引用关系，再根据引用
// 顺序决定编译顺序，依次编译这些包的代码
// 在运行时，被最后导入的包会最先初始化并调用其init()函数
import (
	"fmt"
	"go_learn/github.com/1.daily_study/13_bao/a"
	"go_learn/github.com/1.daily_study/13_bao/snow"
)

func init() {
	fmt.Println("我是主函数的init")
}

func main() {
	a.A()
	snow.Snow()
	fmt.Println("测试包的导入顺序和初始化顺序")
}
